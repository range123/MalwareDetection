from preprocessing import get_dynamic_data_list,get_static_data_list
import pandas as pd
import numpy as np
import pickle
import sys
import gensim

def vectorize(s):
    tokens = gensim.utils.simple_preprocess(s)
    return model.infer_vector(tokens)


if __name__ == "__main__":
    data_path = sys.argv[1]

    scaler,dynamic_clf,static_clf,model = None,None,None,None

    model = gensim.models.doc2vec.Doc2Vec.load('./doc2vec/docmodel.model')
    with open('scaler.pkl','rb') as f:
        scaler = pickle.load(f)

    with open('dynamic_classifier.pkl','rb') as f:
        dynamic_clf = pickle.load(f) 
    with open('static_classifier.pkl','rb') as f:
        static_clf = pickle.load(f) 
    dynamic_data_list = get_dynamic_data_list(data_path)

    static_data_list = get_static_data_list(data_path)
    
    dynamic_data = pd.DataFrame(dynamic_data_list)
    static_data = pd.DataFrame(static_data_list)
    dynamic_df = dynamic_data.fillna(-1).drop(columns=['file_name','malware'],axis=1)
    static_df = static_data.fillna(-1).drop(columns=['file_name','malware'],axis=1)

    ''' Dynamic First '''
    X = scaler.transform(dynamic_df)

    # generate Predictions

    y_pred = dynamic_clf.predict(X)
    
    dynamic_data['malware'] = y_pred

    res = dynamic_data[['file_name','malware']]


    ''' Static Files'''
    X = []
    progress = 0
    for string in static_df['string']:
        X.append(vectorize(string))
        progress+=1
        if progress%100 == 0:
            print(progress)
    X = np.array(X)

    y_pred = static_clf.predict(X)

    static_data['malware'] = y_pred

    s = set(res['file_name'])
    final = list(res.T.to_dict().values())
    
    def check(row):
        if row['file_name'] not in s:
            final.append({'file_name':row['file_name'],'malware':row['malware']})
        return row
    for row in static_data.T.to_dict().values():
        check(row)
    # static_data[['file_name','malware']].apply(func = check,axis=1)

    # Store the result 0 Means benign and 1 Means Malware.
    
    res = pd.DataFrame(final)
    res.to_csv('answer.csv',index=False)
