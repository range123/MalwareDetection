from FeatureExtractor import FeaturesCalc
import numpy as np
import pandas as pd
import os, statistics
from scapy.all import *
from pathlib import Path
from collections import defaultdict

def get_data_list(dir_path):
    data = []
    time = 0
    malcalc = FeaturesCalc(flow_type='malware')
    bencalc = FeaturesCalc(flow_type='legitimate') 
    for path in Path(dir_path).glob('**/*'):
        path = str(path)
        res = []
        pkt_dict = defaultdict(list)
        if 'ip' in path.lower() or  os.path.isdir(path):
            continue
        ismal = 'benign' not in path.lower()
        for pkt in rdpcap(path):
            if IP not in pkt:
                continue
            src,dst = pkt[IP].src,pkt[IP].dst
            if src<dst : flow_id = (src,dst)
            else : flow_id = (dst,src)
            pkt_dict[flow_id].append(pkt)
        for x in pkt_dict:
            res = [x[0],x[1]]
            if ismal: res.extend(malcalc.compute_features(pkt_dict[x]))
            else: res.extend(bencalc.compute_features(pkt_dict[x]))
            data.append(res)
        time+=1
        if time%10 == 0:
            print(time)
    return data

if __name__ == '__main__':
    dir_path = './Botnet_Detection_Dataset/'

    data = get_data_list(dir_path)

    df = pd.DataFrame(data)


    # Set Column names.
    df.columns = ["IP1","IP2","Avg_syn_flag", "Avg_urg_flag", "Avg_fin_flag", "Avg_ack_flag", "Avg_psh_flag", "Avg_rst_flag", "Avg_DNS_pkt", "Avg_TCP_pkt",
        "Avg_UDP_pkt", "Avg_ICMP_pkt", "Duration_window_flow", "Avg_delta_time", "Min_delta_time", "Max_delta_time", "StDev_delta_time",
        "Avg_pkts_lenght", "Min_pkts_lenght", "Max_pkts_lenght", "StDev_pkts_lenght", "Avg_small_payload_pkt", "Avg_payload", "Min_payload",
        "Max_payload", "StDev_payload", "Avg_DNS_over_TCP", "Label"]
    
    df['Duration_window_flow'] = pd.to_numeric(df['Duration_window_flow'])
    
    df.to_csv('./botnet_train.csv',index=False)